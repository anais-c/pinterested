{"filter":false,"title":"products_controller.rb","tooltip":"~/depot/app/controllers/products_controller.rb","undoManager":{"stack":[[{"start":{"row":72,"column":0},"end":{"row":72,"column":1},"action":"insert","lines":["e"],"id":2}],[{"start":{"row":72,"column":1},"end":{"row":72,"column":2},"action":"insert","lines":["n"],"id":3}],[{"start":{"row":72,"column":2},"end":{"row":72,"column":3},"action":"insert","lines":["d"],"id":4}],[{"start":{"row":72,"column":3},"end":{"row":72,"column":5},"action":"remove","lines":["  "],"id":5},{"start":{"row":72,"column":3},"end":{"row":73,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":72,"column":2},"end":{"row":72,"column":3},"action":"remove","lines":["d"],"id":6}],[{"start":{"row":72,"column":1},"end":{"row":72,"column":2},"action":"remove","lines":["n"],"id":7}],[{"start":{"row":72,"column":0},"end":{"row":72,"column":1},"action":"remove","lines":["e"],"id":8}],[{"start":{"row":73,"column":0},"end":{"row":84,"column":0},"action":"insert","lines":["  private","    # Use callbacks to share common setup or constraints between actions.","    def set_product","      @product = Product.find(params[:id])","    end","","    # Never trust parameters from the scary internet, only allow the white","    # list through.","    def product_params","      params.require(:product).permit(:title, :description, :image_url, :price)","    end",""],"id":9}],[{"start":{"row":84,"column":0},"end":{"row":84,"column":3},"action":"insert","lines":["end"],"id":10}],[{"start":{"row":0,"column":0},"end":{"row":88,"column":2},"action":"remove","lines":["class ProductsController < ApplicationController","  before_action :set_product, only: [:show, :edit, :update, :destroy]","","  # GET /products","  # GET /products.json","  def index","    @products = Product.all","  end","","  # GET /products/1","  # GET /products/1.json","  def show","  end","","  # GET /products/new","  def new","    @product = Product.new","  end","","  # GET /products/1/edit","  def edit","  end","","  # POST /products","  # POST /products.json","  def create","    @product = Product.new(product_params)","","    respond_to do |format|","      if @product.save","        format.html { redirect_to @product, notice: 'Product was successfully created.' }","        format.json { render :show, status: :created, location: @product }","      else","        format.html { render :new }","        format.json { render json: @product.errors, status: :unprocessable_entity }","      end","    end","  end","","  # PATCH/PUT /products/1","  # PATCH/PUT /products/1.json","  def update","    respond_to do |format|","      if @product.update(product_params)","        format.html { redirect_to @product, notice: 'Product was successfully updated.' }","        format.json { render :show, status: :ok, location: @product }","      else","        format.html { render :edit }","        format.json { render json: @product.errors, status: :unprocessable_entity }","      end","    end","  end","","  # DELETE /products/1","  # DELETE /products/1.json","  def destroy","    @product.destroy","    respond_to do |format|","      format.html { redirect_to products_url, notice: 'Product was successfully destroyed.' }","      format.json { head :no_content }","    end","  end","  ","  def who_bought","    @product = Product.find(params[:id])","    @latest_order = @product.orders.order(:updated_at).last","    if stale?(@latest_order)","      respond_to do |format|","        format.atom","      end","    end","  end","","  private","    # Use callbacks to share common setup or constraints between actions.","    def set_product","      @product = Product.find(params[:id])","    end","","    # Never trust parameters from the scary internet, only allow the white","    # list through.","    def product_params","      params.require(:product).permit(:title, :description, :image_url, :price)","    end","end","  ","  ","  ","  "],"id":11},{"start":{"row":0,"column":0},"end":{"row":89,"column":3},"action":"insert","lines":["class ProductsController < ApplicationController","  before_action :set_product, only: [:show, :edit, :update, :destroy]","","  # GET /products","  # GET /products.json","  def index","    @products = Product.all","  end","","  # GET /products/1","  # GET /products/1.json","  def show","  end","","  # GET /products/new","  def new","    @product = Product.new","  end","","  # GET /products/1/edit","  def edit","  end","","  # POST /products","  # POST /products.json","  def create","    @product = Product.new(product_params)","","    respond_to do |format|","      if @product.save","        format.html { redirect_to @product,","          notice: 'Product was successfully created.' }","        format.json { render action: 'show', status: :created,","          location: @product }","      else","        format.html { render action: 'new' }","        format.json { render json: @product.errors,","          status: :unprocessable_entity }","      end","    end","  end","","  # PATCH/PUT /products/1","  # PATCH/PUT /products/1.json","  def update","    respond_to do |format|","      if @product.update(product_params)","        format.html { redirect_to @product,","          notice: 'Product was successfully updated.' }","        format.json { head :no_content }","      else","        format.html { render action: 'edit' }","        format.json { render json: @product.errors,","          status: :unprocessable_entity }","      end","    end","  end","","  # DELETE /products/1","  # DELETE /products/1.json","  def destroy","    @product.destroy","    respond_to do |format|","      format.html { redirect_to products_url }","      format.json { head :no_content }","    end","  end","","  def who_bought","    @product = Product.find(params[:id])","    @latest_order = @product.orders.order(:updated_at).last","    if stale?(@latest_order)","      respond_to do |format|","        format.atom","      end","    end","  end","","  private","    # Use callbacks to share common setup or constraints between actions.","    def set_product","      @product = Product.find(params[:id])","    end","","    # Never trust parameters from the scary internet, only allow the white","    # list through.","    def product_params","      params.require(:product).permit(:title, :description, :image_url, :price)","    end","end"]}],[{"start":{"row":89,"column":3},"end":{"row":90,"column":2},"action":"remove","lines":["","  "],"id":12}],[{"start":{"row":89,"column":2},"end":{"row":89,"column":3},"action":"remove","lines":["d"],"id":13}],[{"start":{"row":89,"column":1},"end":{"row":89,"column":2},"action":"remove","lines":["n"],"id":14}],[{"start":{"row":89,"column":0},"end":{"row":89,"column":1},"action":"remove","lines":["e"],"id":15}],[{"start":{"row":0,"column":0},"end":{"row":89,"column":0},"action":"remove","lines":["class ProductsController < ApplicationController","  before_action :set_product, only: [:show, :edit, :update, :destroy]","","  # GET /products","  # GET /products.json","  def index","    @products = Product.all","  end","","  # GET /products/1","  # GET /products/1.json","  def show","  end","","  # GET /products/new","  def new","    @product = Product.new","  end","","  # GET /products/1/edit","  def edit","  end","","  # POST /products","  # POST /products.json","  def create","    @product = Product.new(product_params)","","    respond_to do |format|","      if @product.save","        format.html { redirect_to @product,","          notice: 'Product was successfully created.' }","        format.json { render action: 'show', status: :created,","          location: @product }","      else","        format.html { render action: 'new' }","        format.json { render json: @product.errors,","          status: :unprocessable_entity }","      end","    end","  end","","  # PATCH/PUT /products/1","  # PATCH/PUT /products/1.json","  def update","    respond_to do |format|","      if @product.update(product_params)","        format.html { redirect_to @product,","          notice: 'Product was successfully updated.' }","        format.json { head :no_content }","      else","        format.html { render action: 'edit' }","        format.json { render json: @product.errors,","          status: :unprocessable_entity }","      end","    end","  end","","  # DELETE /products/1","  # DELETE /products/1.json","  def destroy","    @product.destroy","    respond_to do |format|","      format.html { redirect_to products_url }","      format.json { head :no_content }","    end","  end","","  def who_bought","    @product = Product.find(params[:id])","    @latest_order = @product.orders.order(:updated_at).last","    if stale?(@latest_order)","      respond_to do |format|","        format.atom","      end","    end","  end","","  private","    # Use callbacks to share common setup or constraints between actions.","    def set_product","      @product = Product.find(params[:id])","    end","","    # Never trust parameters from the scary internet, only allow the white","    # list through.","    def product_params","      params.require(:product).permit(:title, :description, :image_url, :price)","    end",""],"id":16},{"start":{"row":0,"column":0},"end":{"row":89,"column":3},"action":"insert","lines":["class ProductsController < ApplicationController","  before_action :set_product, only: [:show, :edit, :update, :destroy]","","  # GET /products","  # GET /products.json","  def index","    @products = Product.all","  end","","  # GET /products/1","  # GET /products/1.json","  def show","  end","","  # GET /products/new","  def new","    @product = Product.new","  end","","  # GET /products/1/edit","  def edit","  end","","  # POST /products","  # POST /products.json","  def create","    @product = Product.new(product_params)","","    respond_to do |format|","      if @product.save","        format.html { redirect_to @product,","          notice: 'Product was successfully created.' }","        format.json { render action: 'show', status: :created,","          location: @product }","      else","        format.html { render action: 'new' }","        format.json { render json: @product.errors,","          status: :unprocessable_entity }","      end","    end","  end","","  # PATCH/PUT /products/1","  # PATCH/PUT /products/1.json","  def update","    respond_to do |format|","      if @product.update(product_params)","        format.html { redirect_to @product,","          notice: 'Product was successfully updated.' }","        format.json { head :no_content }","      else","        format.html { render action: 'edit' }","        format.json { render json: @product.errors,","          status: :unprocessable_entity }","      end","    end","  end","","  # DELETE /products/1","  # DELETE /products/1.json","  def destroy","    @product.destroy","    respond_to do |format|","      format.html { redirect_to products_url }","      format.json { head :no_content }","    end","  end","","  def who_bought","    @product = Product.find(params[:id])","    @latest_order = @product.orders.order(:updated_at).last","    if stale?(@latest_order)","      respond_to do |format|","        format.atom","      end","    end","  end","","  private","    # Use callbacks to share common setup or constraints between actions.","    def set_product","      @product = Product.find(params[:id])","    end","","    # Never trust parameters from the scary internet, only allow the white","    # list through.","    def product_params","      params.require(:product).permit(:title, :description, :image_url, :price)","    end","end"]}],[{"start":{"row":89,"column":2},"end":{"row":89,"column":3},"action":"remove","lines":["d"],"id":17}],[{"start":{"row":89,"column":1},"end":{"row":89,"column":2},"action":"remove","lines":["n"],"id":18}],[{"start":{"row":89,"column":0},"end":{"row":89,"column":1},"action":"remove","lines":["e"],"id":19}],[{"start":{"row":88,"column":7},"end":{"row":89,"column":0},"action":"remove","lines":["",""],"id":20}]],"mark":18,"position":18},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":88,"column":7},"end":{"row":88,"column":7},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1430989257944,"hash":"dc3fe4426d42598d204c71981d34c27bc8cd4ca1"}